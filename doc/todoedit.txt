*todoedit.txt*  Edits todo.txt with vim-partedit.

    Really Thanks: >

        @thinca       vim-partedit
        @freitass     todo.txt-vim
        @dbeniamine   todo.txt-vim

==============================================================================
CONTENTS                                                     *todoedit-contents*

    1. Prepare ................................. |todoedit-prepare|
        1.1. Dependencies ...................... |todoedit-prepare-dependencies|
        1.2. File name ......................... |todoedit-prepare-filename|
        1.3. todoedit's task formats ........... |todoedit-prepare-taskformats|
        1.4. recurrence task ................... |todoedit-prepare-rec-task|
    2. Example ................................. |todoedit-example|
    3. Commands ................................ |todoedit-commands|
        3.1. Sort and fold tasks ............... |todoedit-commands-sort-fold|
        3.2. Mark as done ...................... |todoedit-commands-done|
    4. Options ( Save done tasks ) ............. |todoedit-options|
    5. Auto complition ......................... |todoedit-complition|
        5.1. requires .......................... |todoedit-complition-requires|
        5.2. default candidates ................ |todoedit-complition-defCans|
    6. Good keymaps ............................ |todoedit-good-keymaps|
        6.1. Fold .............................. |todoedit-good-keymaps-fold|
        6.2. Expand window ..................... |todoedit-good-keymaps-exWin|

==============================================================================
1. Prepare                                                    *todoedit-prepare*

    1.1 Dependencies                             *todoedit-prepare-dependencies*

        `vim-partedit`

        see: https://github.com/thinca/vim-partedit

    1.2 File name                                    *todoedit-prepare-filename*

        `todo.txt`

    1.3 todoedit's task formats                   *todoedit-prepare-taskformats*

        `buy eggs`                 shows task
        `buy eggs +foo`            shows folder
        `buy eggs +foo ++bar`      shows subfolder
        `buy eggs @06-09`          shows contexts
        `buy eggs due:2018-08-15`  shows due date
        `buy eggs rec:3d`          shows recurrence task
        `x 2018-07-30 buy eggs`    shows completed task

        see details: https://github.com/todotxt/todo.txt

    1.4 recurrence task                             *todoedit-prepare-rec-task*

        if today is 2018-08-10 ... >

            ( before done )                   ( after done )
            buy eggs rec:+3d due:2018-08-01 | buy eggs rec:+3d due:2018-08-04
            buy eggs rec:+3d                | buy eggs rec:+3d due:2018-08-13
            buy eggs rec:3d  due:2018-08-01 | buy eggs rec:3d  due:2018-08-13
            buy eggs rec:3d                 | buy eggs rec:3d  due:2018-08-13

<        rec: is ... >

            rec:3d : set due date after 3 days   from today
            rec:3w : set due date after 3 weeks  from today
            rec:3m : set due date after 3 months from today
            rec:3y : set due date after 3 years  from today

<        rec:+ is ... ( strict mode ) >

            rec:+3d : set due date after 3 days   from due date
            rec:+3w : set due date after 3 weeks  from due date
            rec:+3m : set due date after 3 months from due date
            rec:+3y : set due date after 3 years  from due date

<            if task has no due date, todoedit create due date from today.

        if you do not needs rec's tasks ...

            <localleader> X

==============================================================================
2. Example                                                    *todoedit-example*

    2.1 git clone `vim-partedit`

        `$ git clone --depth https://github.com/thinca/vim-partedit`

    2.2 create `done.txt` for saving completed tasks

        `$ touch done.txt`

    2.3 vimrc

        `set runtimepath+=/PATH/TO/vim-partedit`
        `let g:maplocalleader = "\<Space>"`
        `let g:doneTaskFile = '/PATH/TO/done.txt'`

    2.4 create `todo.txt`

        `$ vim todo.txt`

    2.5 write new tasks

        `buy a book      +study   @09-12 due:2018-09-01`
        `buy a milk      +meal    @18-21 due:2018-09-01`
        `go to library   +study   @09-12 due:2018-09-01`
        `study drawing   +study   @12-15 due:2018-09-01`
        `earn much money +Someday`

    2.6 sort and fold by `due:`

        press <Space> d

        `+- 003 due:2018-09-01 ············`
        `+- 001 ···························`

    2.7 edit `due:` on another buffer

        move cursor on `due:` folding line
        press <Space> <Space>

        `+- 003 due:2018-09-01 ············`

    2.8 sort and fold by `@Contexts`

        press <Space> c

        `+- 002 @09-12 ····················`
        `study drawing   +study   @12-15 due:2018-09-01`
        `buy a milk      +meal    @18-21 due:2018-09-01`

    2.9 mark as done

        move cursor on `buy a milk` task line
        press <Space> x

        `x 2018-08-04 buy a milk +meal @18-21 due:2018-09-01`

==============================================================================
3. Commands                                                  *todoedit-commands*

    3.1 Sort and fold tasks:                       *todoedit-commands-sort-fold*

        `<localleader>s`     Sort and fold the file
        `<localleader>sf`    Sort and fold the file on +Folder
        `<localleader>ss`    Sort and fold the file on ++SubFolder
        `<localleader>sc`    Sort and fold the file on @Contexts
        `<localleader>sd`    Sort and fold the file on due:yyyy-mm-dd date
        `<localleader>sx`    Sort and fold the file on x completed tasks

    3.2 Mark as done:                                   *todoedit-commands-done*

        `<localleader>x`     Mark current task as done or undone ( toggle )
        `<localleader>X`     Swipe tasks

    3.3 Part Edit tasks:                            *todoedit-commands-partedit*

        `<localleader><localleader>`     Edit tasks on another buffer

==============================================================================
4. Options ( Save done tasks )                                *todoedit-options*

    You can save completed tasks to the `done.txt`
    if you swipe tasks ( <localleader> X ). >

        let g:doneTaskFile = '/PATH/TO/done.txt'

==============================================================================
5. Auto complition                                         *todoedit-complition*

    Pop up candidates words triggerd by +Folder, ++SubFolder and @Contexts.

    5.1 requires:                                 *todoedit-complition-requires*

        deoplete.nvim
        https://github.com/Shougo/deoplete.nvim

        deoplete-todoedit
        https://github.com/callmekohei/deoplete-todoedit

    5.2 default candidates:              *todoedit-complition-defaultCandidates*

        set default folder and contexts in vimrc if you like >

        let g:deoplete_todoedit_defaultContext =
            \ '06-09 09-12 12-15 15-18 18-21 21-24 PROJECT OFFICE'

        let g:deoplete_todoedit_defaultFolder  = 'TMP HURRY SomeDay'

==============================================================================
6. Good keymaps                                          *todoedit-good-keymaps*

    6.1 Fold                                        *todoedit-good-keymaps-fold*

        author: @LeafCage
        see   : http://d.hatena.ne.jp/leafcage/20111223/1324705686 >

            let g:mapleader = "\<Space>"
            noremap <leader>j zj
            noremap <leader>k zk
            noremap <leader>n ]z
            noremap <leader>p [z
            noremap <leader>h zc
            noremap <leader>l zo
            noremap <leader>a za
            noremap <leader>m zM
            noremap <leader>i zMzv
            noremap <leader>r zR
            noremap <leader>f zf

<    6.2. Expand window                            *todoedit-good-keymaps-exWin*

      author: @grohiro
      see   : https://qiita.com/grohiro/items/e3dbcc93510bc8c4c812 >

      nnoremap M :<C-u>call <SID>toggleWindowSize()<CR>

      let s:toggle_window_size = 0

      function! s:toggleWindowSize()
        if s:toggle_window_size ==# 1
          execute "normal \<C-w>="
          let s:toggle_window_size = 0
        else
          :resize
          :vertical resize
          let s:toggle_window_size = 1
        endif
      endfunction

===============================================================================
vim:ft=help:et:ts=4:sw=4:sts=4:norl
